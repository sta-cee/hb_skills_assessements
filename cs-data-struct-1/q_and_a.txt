--------
Runtime
--------

1. When calculating the Big O notation for a particular algorithm, it’s necessary to consider the length of time it takes for the algorithm to run as the algorithm’s workload approaches infinity. You can think of the workload as the number of tasks required to complete a job. What determines the workload of figuring out whether your box of animal crackers contains an elephant?
    - The number of all animal crackers in your box of animal crackers.


2. Order the following runtimes in descending order of efficiency (that is, fastest runtimes first, slowest last) as n approaches infinity:

    - O(1)
    - O(log n)
    - O(n)
    - O(n log n)
    - O(n^2)
    - O(2^n)

------------------
Stacks and Queues
------------------

In the following cases, would a stack or queue be a more appropriate data structure?

1. The process of loading and unloading pallets onto a flatbed truck: 
    - Stack

2. Putting bottle caps on bottles of beer as they roll down an assembly line: 
    - Queue

3. Calculating the solution to this mathematical expression: 2 + (7 * 4) - (3 / 2):
    - Stack

4. Describe two more situations where a queue would be an appropriate data structure:
    - Serving customers in a deli line.
    - Printer queue.

5. Describe two more situations where a stack would be an appropriate data structure:
    - Back button in browser.
    - Reversing a word.

-------------
Linked Lists
-------------

1. 
Which are the nodes? 
    - Apple node
    - Berry node
    - Cherry node

What is the data for each node?
    - the string 'Apple'
    - the string 'Berry'
    - the string 'Cherry'

Where is the head?
    - Apple node

Where is the tail?
    - Cherry node (pointing to None)


2. What’s the difference between doubly- and singly-linked lists?
    - Doubly linked lists have the next node and previous node.

3. Why is it faster to append to a linked list if we keep track of the tail as an attribute?
    - Because then we don’t have to traverse to the end of the list every time we want to add a node. We 'know' where the end is and how to access it.

------
Trees
------

1. Given the tree above, in what order would a Breadth First Search (BFS) algorithm visit each node until finding burritos (starting at food)? (Assume nodes are enqueued in left-to-right order.) Just list the order of nodes visited; no need to recreate the state of the algorithm data in your answer.

    - food
    - Italian
    - Indian
    - Mexican
    - lasagna
    - pizza
    - tikka masala
    - saag
    - burritos

2. Given the tree above, in what order would a Depth First Search (DFS) algorithm visit each node until finding Chicago-style (starting at food)? (Assume nodes are pushed in left-to-right order.) Just list the order of nodes visited; no need to recreate the state of the algorithm data in your answer.

    - food
    - Mexican
    - burritos
    - tacos
    - enchiladas
    - Indian
    - tikka masala
    - saag
    - Italian
    - lasagna
    - pizza
    - thin crust
    - Chicago-style

How is a binary search tree different from other trees?
    - Each node has a left and right child
    - Has a “rule” for arrangement
      (Often used for fast searching)
